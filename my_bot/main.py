import asyncio
import io
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters.command import CommandStart
from aiogram.enums import ParseMode
from aiogram.utils import markdown
from aiogram.types import CallbackQuery
import random
from config_reader import settings
from init_db import initialize
from models.database import service
from recognize_speech import VOICE_INPUT_FILE, AssistantAI
from keyboards import (
    build_actions_kb
)
from yandex_meteo import get_weather
from utils.logger import get_logger

logger = get_logger("main")
bot: Bot = Bot(token=settings.BOT_TOKEN.get_secret_value())

router: Router = Router()
ai_assistant = AssistantAI()

last_letters = {}


@router.message(CommandStart())
async def handle_start(message: types.Message):
    url = "https://w7.pngwing.com/pngs/547/380/png-transparent-robot-waving-hand-bot-ai-robot-thumbnail.png"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user} –ø–æ–¥–∫–ª—é—á–∏–ª—è –∫ –±–æ—Ç—É")
    await message.answer(
        text=f"{markdown.hide_link(url)}Hello, {markdown.hbold(message.from_user.full_name)}!",
        parse_mode=ParseMode.HTML,
        reply_markup=build_actions_kb(),
    )


@router.callback_query(F.data == 'help')
async def handle_help(call: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.from_user} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø–æ–º–æ—à—å—é –±–æ—Ç–∞")
    user_data = call.from_user
    help_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_data.first_name}! üòä\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –º–Ω–æ–≥–æ–µ! –í–æ—Ç —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –¥–ª—è –≤–∞—Å:\n\n"
        "1. <b>–¢–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</b> –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.\n"
        "2. <b>–í—ã–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã:</b> –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –¥–ª—è —á–µ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π —Å–Ω–∏–∑—É –ü–æ–≥–æ–¥–∞.\n"
        "3. <b>–ò–≥—Ä–∞ –≤ –≥–æ—Ä–æ–¥–∫–∏:</b> –í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É –≤ –≥–æ—Ä–æ–¥–∞ —Å –±–æ—Ç–æ–º! –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, –∏ –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥–∞.\n"
        "4. <b>–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:</b> –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –≤ –≥–æ—Ä–æ–¥–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /finish.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –≤ –≥–æ—Ä–æ–¥–∞, –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –æ–±—â–µ–Ω–∏–µ–º —Å –±–æ—Ç–æ–º!\n"
    )
    await call.message.answer(
        help_text,
        parse_mode=ParseMode.HTML,
        reply_markup=build_actions_kb(),
    )


@router.callback_query(F.data == 'about')
async def about(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.from_user} –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–æ—Ç–µ")
    await bot.answer_callback_query(
        callback.id,
        text='–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç, '
             '–∞ –µ—â–µ —è —É–º–µ—é –∏–≥—Ä–∞—Ç—å –≤ –≥–æ—Ä–æ–¥–∫–∏.',
        show_alert=True
    )


@router.callback_query(F.data == 'voice')
async def voice_message_handler(callback_query: CallbackQuery):
    """"""
    await callback_query.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.content_type == "voice")
async def voice_message_handler(message: types.Message, bot: Bot):
    """Handle voice input"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç")
    voice_file = await bot.get_file(message.voice.file_id)
    processing_msg = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    voice_ogg = io.BytesIO()
    await bot.download_file(voice_file.file_path, voice_ogg)
    with open(f"{str(message.from_user.id)}_{VOICE_INPUT_FILE}", "wb") as new_file:
        new_file.write(voice_ogg.getvalue())

    try:
        voice_response = ai_assistant.create_response_from_voice(message.from_user.id)
    except Exception as err:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.")
        return
    await processing_msg.delete()
    logger.info(f"–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ")

    await message.reply(voice_response)


@router.callback_query(F.data == 'play')
async def play(call: CallbackQuery):
    """
    –í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä–æ–∫–∞.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.from_user} –Ω–∞—á–∞–ª –∏–≥—Ä—É —Å –±–æ—Ç–æ–º")
    chat_id = call.message.chat.id
    await call.answer()
    await call.message.answer("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:")
    await call.message.answer(
        parse_mode=ParseMode.HTML,
        text=(
            "<b>–ò–≥—Ä–∞ –≤ –≥–æ—Ä–æ–¥–∞ - —ç—Ç–æ –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥.</b>\n"
            "–ê –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."
            "–ü–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º –±—É–¥–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –≤—ã–±—Ä–∞–Ω —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ."
            "–ö–æ–º–∞–Ω–¥–∞ <b>/finish</b> –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É.\n"
            "<b>–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!</b>"
        ).strip()
    )
    cities_dict = await service.get_cities()
    litter = random.choice(list(cities_dict.keys()))
    if chat_id not in last_letters:
        last_letters[chat_id] = cities_dict
    last_letters[chat_id]["letter"] = litter
    await bot.send_message(
        chat_id,
        text='–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞—á–∏–Ω–∞—é—â–∏–π '
             '—Å –±—É–∫–≤—ã "<b>{}</b>"'.format(litter.upper()),
        parse_mode=ParseMode.HTML,
    )


@router.message()
async def echo(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip().lower()
    first_letter = text[0]
    if message.text != "/finish":
        if last_letters[chat_id]["letter"] == first_letter:

            chat_cities = last_letters[chat_id]
            last_letter = text[-1]
            cities_for_fist_letter = chat_cities.get(first_letter, [])

            if text in cities_for_fist_letter:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É
                cities_for_last_letter = chat_cities.get(last_letter,
                                                         [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
                if cities_for_last_letter:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É
                    bot_city = cities_for_last_letter[-1]  # –ë–æ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –≥–æ—Ä–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É

                    if bot_city == text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –Ω–∞–∑–≤–∞–Ω –±–æ—Ç–æ–º
                        await message.answer('–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª –Ω–∞–∑–≤–∞–Ω. –ü–∞–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.')
                    else:
                        cities_for_fist_letter.remove(text)  # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
                        chat_cities[
                            first_letter] = cities_for_fist_letter  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –≤ chat_cities
                        cities_for_last_letter.remove(bot_city)  # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ—Ç–æ–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
                        chat_cities[last_letter] = cities_for_last_letter
                        last_letters[chat_id]["letter"] = bot_city[-1]
                        await bot.send_message(
                            chat_id,
                            '–û—Ç–ª–∏—á–Ω–æ. –ú–æ–π –≥–æ—Ä–æ–¥ <b>"{}"</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É <b>"{}"</B>'.format(
                                bot_city.capitalize(), bot_city[-1].upper()),
                            parse_mode=ParseMode.HTML,
                        )
                else:
                    await message.answer(
                        '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                    )
            else:
                await message.answer(
                    '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –Ω–∞–∑–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                )


        else:
            await message.answer(
                text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å <b>{last_letters[chat_id]["letter"].upper()}</b>.',
                parse_mode=ParseMode.HTML,
            )
    else:
        if chat_id in last_letters:
            del last_letters[chat_id]  # –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
            await message.answer(
                '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.',
                reply_markup=build_actions_kb()
            )
        else:
            await message.answer('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.')


@router.callback_query(F.data == 'weather')
async def handle_weather(call: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.from_user} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
    current_weather_message, tomorrow_weather_message = await get_weather()
    await call.message.answer(
        f"<b>–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n{current_weather_message}\n\n"
        f"<b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</b>\n{tomorrow_weather_message}",
        parse_mode=ParseMode.HTML,
    )


async def main():
    await initialize()
    logger.info(f" –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã")
    dp: Dispatcher = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == '__main__':
    logger.info(f" –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.run(main())
